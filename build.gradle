/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10/userguide/tutorial_java_projects.html
 */

buildscript {
    dependencies {
        classpath(
                'net.sf.proguard:proguard-gradle:6.0.3'
        )
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    id "com.google.protobuf" version "0.8.6"
}


// Define the main class for the application
mainClassName = 'App'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'
    compile 'com.google.protobuf:protobuf-lite:3.0.0'

    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java-util
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.6.1'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

protobuf {
  // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated/source/proto/main/java'
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: jar) {

    def javaHome = System.getProperty('java.home')

    // Shrink対象のJAR
    injars jar.archivePath

    libraryjars files(
            "${javaHome}/jmods/java.base.jmod"  // Java SEランタイム
    )

    // Fat JARを使わない場合、依存ライブラリーをlibraryjarsに追加する
//    libraryjars configurations.compile.files

    // 出力先 お好みでどうぞ
    outjars("${jar.destinationDir}/proguarded.jar")

    // Shrinkしないクラス
    keep("public class ${jar.manifest.attributes['Main-Class']} { public static void main(java.lang.String[]); }")
    keep("class com.google.protobuf.** { *; }")
    keep("class data.** { *; }")

    dontwarn("com.google.**")
    dontwarn("javax.**")
    dontwarn("ch.qos.logback.**")
    dontwarn('afu.org.checkerframework.**')
    dontwarn("org.checkerframework.**")
    dontwarn('org.slf4j.**')
}

// assemble実行時にProGuard
assemble.dependsOn(proguard)